// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5b\x0d\x6c\x1c\xd5\x11\x7e\x7b\xf6\xd9\xe7\x44\xa9\x0d\xe1\x12\x67\xf9\xa9\x41\x29\xb1\x2c\xea\xd8\x8e\x7f\xae\x2e\x14\x43\x80\xba\xc6\x6d\xae\x14\x43\x94\x2a\x9c\x97\xcb\xd5\x36\x4e\x1c\xc7\xbe\x24\xde\x5c\x28\xfe\x4b\x09\x2e\xaa\xa2\x00\x52\x14\x51\x29\xe7\x04\x9a\x56\x42\xb2\x90\xda\xb8\x15\xad\xdd\x08\x24\xab\x6a\x91\x55\x51\xc9\x8d\x02\xb2\xaa\x56\x4a\xab\x56\xb2\x10\x0d\x56\x04\x6c\xb5\x6f\xbe\xf5\xed\xce\xee\xde\x19\x48\x55\xa9\xba\x95\xcc\xdc\xcc\x7b\x33\xf3\xde\xbc\xd9\x79\xdf\xdb\x47\x9e\x79\xb0\xfd\xa1\x80\xa2\x08\xeb\x51\xc4\x87\x22\xc3\x65\x9e\xb2\x07\x33\xbf\x5b\xf0\xdf\x2f\x0a\x45\xcc\x6c\x20\xd9\x31\x21\xc4\x17\x84\x10\xa9\x35\x4b\x86\xc9\xeb\x5a\xbf\x94\xa7\xd4\x65\xc9\xcf\x4c\x52\xbf\xe2\x80\x10\x4b\x86\x61\xcc\x9c\x05\x5f\x20\xc4\xb2\x61\x18\xe5\xcc\xe9\x85\xc2\x8c\xdd\x80\xc9\x43\xfe\x12\xe8\xcc\x46\xa2\xfa\x50\x94\xf9\x6f\x91\xfe\x2e\xc0\x5e\x4a\x8d\xb8\xfc\xb7\x78\xf8\x3b\x26\xe7\x2e\x44\x58\xdc\x21\x5b\xf4\x22\xf8\x59\x85\x5e\x81\x10\xa2\x2b\x24\x44\x85\x10\xe2\x30\x68\x47\x68\x93\xc2\xf5\x23\x59\xfc\xce\x84\x88\x0f\x87\x6e\x24\xff\x23\xe0\x95\x32\xe2\xd3\x98\x57\x00\xf3\xaa\xba\x42\x71\x1e\x43\xbf\x82\x6f\xcb\x71\x74\x14\xac\x91\xab\xa9\x8f\x92\xc1\xdd\x37\x86\xa4\xfe\x85\x12\xe8\x9d\x5e\x34\x88\x2e\x80\xce\x83\xce\x81\xce\x82\x4e\x83\x4e\x81\x9e\x07\x3d\x03\x7a\x0a\xf4\x04\xe8\x71\xd0\x61\xd0\x21\xd0\xfe\x95\x71\x07\xe4\xb8\x3b\x49\xae\x76\xd3\xf8\x47\xca\xb0\x4e\xd4\x4f\x1f\x2d\xc7\xfc\x6a\xa8\x5f\xd5\x10\xe4\x15\x90\x57\x42\x4e\x7e\xf4\xe1\x4a\x92\xaf\x21\xff\xfa\xb1\x1a\xe2\x77\xd1\xb8\xf4\xf1\x08\xe5\xc9\xb3\x94\xb5\xa9\x23\x18\x7f\x1b\x8d\x5f\x7f\xb6\x95\xda\x47\xa3\xb0\x8f\xf9\x1e\x39\xef\x88\x83\x36\x9a\x94\xed\xf1\xaa\x77\xc0\x0f\x81\xa7\x38\xf6\x8c\x1e\x95\x7c\x6f\xd5\x65\xf0\xdf\x07\xff\x1e\xfa\xf7\xa3\xff\x3c\xda\x87\xd1\xbe\x88\xf6\x3d\x92\xef\x0a\x50\xfe\x68\xcf\x75\x4a\x7e\xc7\x49\x5a\x37\xed\xb9\x6e\xa2\x63\x7b\xa9\x5f\x01\xf5\xdb\xf1\x02\xd6\xb5\x19\xeb\x57\x45\xeb\x97\x50\x0e\xca\x78\x87\x95\x13\xc8\xa3\x57\x29\xbf\x15\x45\xca\x83\xe2\x2d\x29\xb7\xde\x93\x5e\xb5\x4d\xea\x95\x1e\x22\x7e\x26\x8d\xbc\x55\x84\x68\x33\x0c\xc3\x5a\xbf\x99\x78\x26\x6f\xcd\x57\xb4\x27\x4d\x7a\xbd\x2a\xcd\x23\x28\x5e\x47\x1c\x91\x1f\x55\xc8\x8f\xaa\xe3\x8e\x75\xb3\xd6\x35\x55\xd5\x0f\xda\x0d\x4a\xf9\x11\xaf\x8a\x82\x7e\x44\xf6\xab\xda\x41\xaf\x1a\xf6\xfc\x8f\x57\x2d\x23\x8f\x28\x6f\xac\xf1\x95\xae\x77\xcf\x23\x8a\x79\x14\xda\xc6\xaf\x8f\x54\xe4\xd4\xfb\xc8\x53\xaf\x32\xa7\x5e\xbb\x2d\x6e\x19\xbd\x9a\x9c\x7a\x57\x3d\xf5\x28\x8f\x4b\x37\xb8\xfb\x5f\x41\xff\x90\xc7\xfa\xe8\x23\x94\xf7\xfa\x59\x8a\x97\x97\xbf\x65\x8f\xf9\x69\xe7\x10\xff\x36\x5a\x37\xed\x2c\xad\x43\xbc\xf9\x79\xca\xdf\x49\x5a\x8f\x99\xdb\xc9\xce\x65\x45\x88\x32\x99\x07\xb4\xde\x3d\x69\x5a\xa7\x99\x30\xda\x83\x68\xdf\x75\x92\xec\xbd\x42\xeb\x16\xdf\xf5\xa2\xa4\xe1\xc2\x41\x47\x5e\x1f\x06\x0d\x17\xd0\x7b\xf3\x78\x40\x08\xc3\x10\x22\x1c\xe8\x23\x5e\x01\xaf\xec\x5d\x99\xaf\x9c\x7f\x51\x66\xfe\x41\x59\x17\x28\x9f\xba\x8a\x60\x17\x34\xf5\x54\xf7\xca\x3e\x61\xbe\x02\x71\xd4\x1f\x2d\xfd\x00\x8d\x4b\x4d\x1a\x3c\x4e\x43\x88\x53\x19\xec\x9b\x74\xe6\x1c\xda\x0b\x85\xe8\x34\xf7\xb5\x03\xc4\x97\xa3\x4e\x5b\x8f\xb5\x2e\x17\x82\xb4\x7f\x9a\xfa\x9b\xe4\x18\x1f\x95\xf2\xb0\xb2\x45\xd6\xef\xb0\x72\x8f\x8c\xbf\xf9\x9e\x06\x65\x3b\xd5\x25\xeb\x3d\x8d\xab\xed\xa8\x9f\xb4\x3e\xa5\x0f\xf9\xe7\x79\xf6\x7c\x88\xfa\xe6\x43\xbb\x47\x3e\x74\x09\xc4\x0f\xd4\xdc\xc7\xde\x37\x0c\xc3\x9a\xdf\xee\xb2\x5a\x61\x8f\x67\x4a\x9d\x46\x3d\xa8\x61\xe3\xa7\x3c\xd2\xd3\x54\xdf\xbd\xf2\xd9\xfe\xbe\xf1\xf1\x6b\x69\xe4\xa1\xfa\x0e\xec\x6f\x76\xd8\xef\x55\x29\xef\x4a\x8b\xdc\x76\xaf\x66\xad\x63\x57\x51\xc7\x2e\xc3\xee\x26\x36\x6e\xd4\x99\x74\xa5\xef\xb8\x97\xb3\x8e\x1b\xf9\xae\x2e\xc0\xfe\x3a\x36\xee\x27\xc8\xee\x63\x6e\xbb\x4f\x64\x1d\xf7\x13\x18\xf7\x7b\xb0\x4b\x89\xa7\xa5\xdb\xe1\x6f\xde\x85\x7f\xae\x30\xfc\xd5\xf9\x59\xf0\xd7\xff\x0a\xf7\xc1\xaf\xde\xc3\x71\x5f\x2b\xc3\x7d\x2d\x2e\xff\xad\xd9\xf0\x57\x31\xf1\xe1\xe2\xcd\x2e\xdc\xe6\xa7\x67\xbe\xaf\xfa\x61\x8c\x6b\x95\xf8\x32\x83\xf3\x36\x32\x9c\x17\x26\x7e\x92\xcf\x03\x71\x5d\xe9\xf7\x38\xe1\x3c\xa5\x94\x70\xde\x08\x70\xde\xed\xeb\x14\xa7\x1e\x70\x9d\x0a\x5c\xa0\x02\xd7\xe1\xbd\x4c\xa9\xc0\x39\x2a\x70\x8e\x0a\x5c\xa4\x62\xdf\x46\x1d\x4f\xa9\xd8\xb7\x55\xec\xdb\x2a\xf6\x6d\xd4\x4b\x0b\xc7\xa5\x54\xaa\xb3\x17\x0a\x80\xf3\x9a\xa3\xd8\xa7\x77\x02\xbf\x11\xce\xd3\xc7\x80\xef\x9a\x9d\xfb\xbd\x3e\x46\xfb\xb0\x3e\x0e\x3c\xd7\x06\x3f\xcd\xc0\x85\x63\x35\x68\x8f\xa0\x1d\xe3\x6a\x06\x0e\x1c\x43\x5d\x1b\x6f\x45\x3b\xe6\xd1\x0c\x1c\x38\x06\x7c\xd7\x7c\xc6\x31\x6f\x6d\x1c\xb8\xae\xed\x4d\xf0\xc0\x75\x6d\x14\xb7\x9e\x71\xe0\xba\xb6\xdf\x83\x07\xae\x6b\x7b\x1b\xfd\x81\xeb\xda\x66\xd1\x0e\x5c\xd7\x36\x8f\x76\xe0\xb5\x42\xe0\xba\x63\x84\xe3\x76\x3c\x8a\x75\x6a\x03\xbe\x1c\x27\xbc\xa7\x1d\x03\x0e\x0c\x02\xdf\xe1\xdc\x95\xda\x65\xad\x57\x08\x54\x48\xda\x11\x78\x5b\x98\xa5\x6e\xe6\x55\xe4\x5f\x91\x10\x53\x86\x61\x94\x36\x21\x2f\x6d\x75\x44\xd8\xf6\xaf\x99\xc1\x4c\x5e\xca\x7d\x21\x0d\xbb\x1b\x28\x9f\xf4\xb4\x00\x0f\x3b\x59\xde\xe3\xe8\x2a\xde\xe3\xa0\xf8\x25\xcd\xab\x04\xfb\x08\x68\x47\xc9\x2f\x84\x33\x6f\xaf\x4f\x1e\xa6\xd4\x9d\x8e\x7d\xd2\x8a\x97\xf5\x3e\xa5\xd4\x2b\xa0\x8b\xa8\x9f\xd7\x40\x97\x21\x5f\x40\xfd\xc4\x7e\x35\x42\xf9\x63\xc5\xcd\xda\x37\xcd\xf9\x97\xf9\xc4\x39\xe4\xd8\x77\xfd\xf5\xcb\x99\xfe\xd2\xa7\xd0\xf7\xc3\x81\xab\xf1\x1b\x62\xfa\x8b\x9e\xfa\x95\x39\xfd\x5e\xcb\x86\x73\xb3\xe8\x2d\x67\xc3\xb9\x1b\xdd\xfd\x17\xec\xb8\x86\xe7\xef\x0a\xae\x59\xf0\xc5\x35\x9e\x38\xfe\xa7\xc8\x0b\x9c\x57\xf5\x9f\x20\x3f\x8e\xa0\xae\x9c\x43\x9e\xa0\xde\xe8\xe7\x71\x7e\x9e\x00\xce\x9d\xbc\xe6\x83\x83\x4f\x01\x07\x63\x1f\xc4\x78\x2e\x23\x5f\x7a\x9b\x4f\x33\x5c\xfd\xb2\x61\x8f\x97\x75\xae\x0b\x17\x3c\x42\xf3\xc0\x39\x7f\xc7\x76\x4b\xbe\x43\xd2\x0c\x2e\xfe\x26\xf1\x2b\xb8\xf8\x61\x41\xe3\x5e\xfa\x44\xd8\xf0\x71\x6a\xcd\xb2\xe4\x3b\x4a\x82\xb2\xbd\xab\x18\xef\x63\x71\x06\xd7\x91\x05\x7a\x6e\xdd\x48\x1b\xa3\x9e\x26\x3b\x1d\x4a\x15\xe9\xb1\xef\x1d\x5c\x6f\x77\xf9\x97\x56\xd6\x87\x70\xb8\x40\x7c\xc9\x3f\xf7\x9b\x3a\x12\x62\x78\xbc\x0c\x78\xdc\xc2\x31\x37\xb1\x7d\xb1\x02\xef\x69\x39\xf5\x9b\x1c\xc7\x79\xb0\x12\xfc\x8b\xe0\xef\xc2\x3a\xd1\x7a\xf4\xe2\xbb\x42\xcf\xe4\x69\xf0\x75\xe8\xff\x32\xfa\xd7\xc3\x5f\x04\xf4\x6e\xd7\x39\xa0\x3c\xc7\x39\xc0\x7c\xff\x67\x34\xe2\x5d\xe7\x00\xac\xaf\x75\x0e\x08\x8a\x30\x8b\x53\x34\x47\x9c\x76\xb2\x38\x75\xb2\x38\xed\x71\x8d\xb7\x3b\xc7\x78\xa3\xab\x1c\xef\x4e\xdb\xb9\x85\xe3\xb2\xcc\x77\x29\xab\x7e\x12\x8e\xd1\x37\x39\x71\x9a\xfd\x7c\x16\xb2\xe3\xa1\x92\xfb\xc8\x9f\x6d\x9f\xf1\xc2\x87\x6e\xbc\xd6\x2c\xa9\x8e\x73\x57\x87\x12\x91\xf8\x28\x35\x81\xef\x65\xb0\xdf\x3b\x01\x7c\x3f\xf1\x01\x8d\xeb\x00\xea\x13\xde\x33\xaf\x7a\xf1\x81\x57\x7d\xf2\xd1\x2b\x06\xee\xc9\x75\x8e\x4f\x4d\xe0\xbb\xc5\x04\x70\xdd\x81\x48\xce\x71\x78\xd6\xf5\x03\xb9\xcf\xf5\x4b\x1e\xf5\xce\xaa\x5b\xbd\x13\x51\x17\x3e\x3e\x91\xf5\xbb\x28\x2d\xb0\x8e\xf6\xb0\xb2\x4e\xc6\x39\xf3\x3e\xc2\xae\xfa\x79\xed\x7e\x83\xec\xa2\x9f\x95\x5f\xba\xd2\x9a\x33\x4e\xf2\xdc\x1b\xc2\xb9\x81\xc5\xbd\x27\x4d\xe3\xea\x50\xfe\x6e\x04\x1c\xef\x1b\xf0\x21\xbe\xaf\x76\x29\x78\xdf\x40\xad\x73\x84\x85\x47\xe2\x13\x67\x1c\x75\x28\x9e\x03\x57\x6b\x93\x4b\xa8\x2b\x6f\xe2\xfd\x9c\x03\x25\x3c\x69\x7d\x8f\x88\x3f\x75\x0e\xf9\x50\x9e\x73\x9e\xd3\x5e\xfb\xd8\x01\xc2\xcf\xa5\x9b\xdc\xfd\xdf\xb0\x9f\x4b\x5f\xc8\xc4\xdf\x79\xee\x05\x7e\x4d\xd3\xfb\x91\xd9\xc7\x2e\xba\xea\xc9\x79\x8f\x7a\xa2\xa5\x69\xfe\x61\x65\x0e\xf5\xe8\x0d\xcf\x78\x86\x95\x37\xe1\x87\xfc\x65\xf6\xab\xdf\x42\x7e\x91\xc9\x7f\x43\xfe\x6d\xf5\xca\xcc\x27\x3d\x4d\xf5\x85\xd7\x2b\xfd\x2c\xad\x57\x50\xfc\xe0\x3a\xe7\xcd\x6b\xc6\x9a\xeb\x9a\x37\xf8\xfe\xfe\x29\xcf\x69\x99\x7c\xba\x8c\x3c\x5a\x04\xfd\xab\x4f\x3e\x45\x73\xce\x7f\xce\xb3\xbe\x78\xeb\x79\xe1\xc6\xf9\x4f\xa9\xcf\xf1\xf2\x74\x16\x7d\x2b\x9f\x8b\x4b\xdc\x38\x79\xd6\x8e\x07\x7d\xf3\x7a\xc1\x27\xaf\x2f\xad\x2a\xaf\x75\xe4\xa9\x3e\x39\x8d\xf3\x16\x6d\x60\x16\x9e\xe3\xdf\x2b\xcb\xe5\xb9\xc7\x86\x9f\xb6\x97\x20\x2f\xe7\x81\x27\x69\x9d\x3b\x0a\x1b\xc8\x4e\x03\xec\xe0\xbc\x77\x18\x94\xaa\x80\x0d\x4f\x05\xb7\xae\xcc\xcf\x89\x13\x90\x67\x36\x5c\x10\xb0\xe1\x82\xf8\x53\x7b\x18\x6e\x72\x9e\x97\xb4\x49\xd4\x25\x7c\x8f\xd7\x26\xdf\x01\x7f\x14\x38\x69\x01\x38\x69\x18\xfc\x25\xf0\xa3\x2c\x1f\x81\xbf\x70\x4e\x8b\xab\xcf\xaf\x0a\x87\x68\xe9\x21\xd4\x8d\xfb\x50\x37\x8e\xfa\xd4\x8d\x7b\xb0\x8e\xc3\xac\x3e\x34\x43\x3e\xca\xe4\x4d\xae\xba\x11\xcd\x52\x37\x38\x2e\xcb\x7c\x9f\xad\x96\xfd\x77\x00\xdf\x87\x15\xc2\x93\x19\x1c\x5e\x05\xff\x0b\xcc\xff\x16\xc8\x2f\x31\xf9\xe6\xcf\x54\xcf\x2c\xfc\x15\x14\xff\x24\xfd\xfc\xbd\x6b\xfe\xde\x55\xe4\xef\x5d\xf3\xf7\xae\xf9\x7b\x57\xae\x97\xbf\x77\xcd\xdf\xbb\x5a\x4f\xfe\xde\xd5\x1a\x7f\xfe\xde\x55\xe4\xef\x5d\xf3\xf7\xae\xf9\x7b\x57\xc7\x7e\x9f\xbf\x77\xcd\xdf\xbb\x5e\xcf\x3c\xcc\xdf\xbb\xe6\xef\x5d\xb9\x7e\xfe\xde\x35\x7f\xef\x9a\xbf\x77\xfd\xef\xdc\xbb\x16\xda\xfe\x44\xa1\xc8\x3f\x78\xf2\x71\xf1\x7e\x14\xd4\x23\x89\x36\xf2\x71\x59\x79\xf2\x71\xf1\x7e\xac\xb8\x1c\xc7\xef\xfc\x43\xcf\xd7\xa3\xed\xe2\x13\xc3\x30\xca\xc0\x2b\x47\x1e\x11\xa1\xa3\x6b\x95\x9b\x51\xe7\xcb\x21\x1f\x02\x35\x65\x77\xe1\xf7\x70\x49\x46\xd6\xe2\xd1\x0f\x47\x14\x71\xca\xd6\xaf\x1b\xb2\x7e\x9b\xec\xa8\x87\xee\x09\x0f\x1f\xe7\x3c\xfa\x4d\x33\x1f\x7e\xcf\xbb\xe6\xa1\x57\x04\xc5\x7c\x91\x53\xfe\x63\xc8\xa7\x8a\x9d\xf2\x38\xe4\xdd\x21\xa7\xfc\x2e\xc8\x5b\x0b\x9c\xf2\x7f\x04\x48\x5e\xc6\xfa\x5f\x84\x7c\x8e\xc9\x0f\x42\xbe\xc4\xc6\xf3\x07\xd8\xaf\x60\xf3\xf9\x35\xe4\x35\x4c\xfe\x1a\xe4\x67\xd8\x78\x4e\xc3\x7e\x3f\xeb\xff\x5d\xd9\xaf\x44\x0c\xb1\xf9\xfe\x25\x40\x72\x1e\x87\x5f\x41\xbe\xc0\xc6\xbf\x0f\xf2\x61\x66\xff\xdf\xb0\x7f\x9c\xc9\x7f\x88\xfe\xb3\x6c\x9c\xdf\x91\xfc\x5a\x71\x8a\xd5\xaa\xd7\x03\x24\xaf\x60\xe3\xf9\x17\xfa\x77\x33\xf9\x57\x21\xe7\x71\xbe\x05\xf2\x79\x26\xff\x1d\xec\x2f\x32\x79\x3d\xfa\x2f\xb3\x22\x31\x8e\xfe\x51\x86\x6f\x1e\x83\xbc\x93\xc9\xff\x24\xed\x94\xba\xf2\xed\x25\xc8\x79\x9c\x1f\x86\x9c\xe7\xdb\x66\xc8\x79\xbe\x5d\x0a\x90\x9c\xe7\xdb\xcf\x20\xe7\x71\x48\x40\xce\xf3\xed\x2d\xd8\xe7\xf9\xf6\x73\xc8\x79\xbe\xbd\x02\x39\xcf\xb7\x93\xb0\xcf\xf3\x6d\xbb\xec\xb7\xde\x95\x6f\x7f\x0c\x90\x9c\xc7\x61\x12\x72\x9e\x6f\xbb\x21\xe7\xf9\xf6\x37\xd8\xe7\xf9\xf6\x34\xfa\xf3\x7c\x13\xf2\xbb\x9b\x87\x50\xca\x83\x3e\xf2\x62\x1f\xb9\x77\xd1\x29\x10\x6b\x7d\xe4\xeb\x7c\xe4\xa5\x3e\xf2\x1b\x7c\xe4\xeb\x5d\xb2\xad\x12\x9f\xab\x2e\xf9\x9d\x52\x7e\xb3\x4b\x3e\x2e\xcf\x91\x1b\x5d\xf2\xb5\x52\x5e\xee\x92\x2f\xca\x7a\xeb\x1e\x7f\xa7\x94\xbb\xc7\x79\x51\x9e\x63\xdd\x71\xde\x25\xe5\xee\x78\x16\x4b\x3b\xee\xb8\xcd\x4a\xb9\x3b\x3e\x2d\x52\xee\x8e\xc3\x79\x69\xdf\xbd\x8e\x2d\x52\xee\x5e\xaf\x7e\x39\xdf\xb0\x4b\xfe\xa1\x8c\xdb\x06\x97\x3c\x2c\xe5\x9b\x5c\xf2\x56\x50\xb3\x6c\x34\xd9\xf6\x43\x8b\x1f\x62\xfc\xb4\x8d\x7f\x40\x08\x71\xa6\x28\xc3\xdf\x2f\x84\x88\x96\x38\xdb\xed\xf6\x23\xcc\x7e\x84\xd9\x37\xf9\xf3\xcc\xfe\xa9\x02\x27\x3f\x15\x72\xfa\xeb\xb4\xf9\xdb\x2e\xe8\xac\x66\xef\x3f\xa7\x38\xf9\x8a\x80\x93\x1f\x2a\x74\xda\xe3\xf6\x5b\x99\xfd\xff\xb7\x78\xdd\x02\xfd\x35\xc0\x47\x35\x36\xfe\xcb\xb0\x61\xf1\xd5\xb6\xf8\x9a\xfc\x56\x21\xc4\x5e\x1b\x6f\xea\x0e\xdb\xf8\x5a\x21\xc4\x8b\x36\xbe\xce\x36\x5e\x93\xdf\x26\x84\x78\xc3\xc6\xd7\x9b\x3f\xaa\x93\x89\xa1\xa4\xe8\x1d\x48\x24\xfb\x07\xf6\x3f\x99\x88\xc5\x7a\xfa\x12\xc9\x58\x7c\xb0\x37\xa6\xc5\xe3\x89\xfe\xa4\xa8\x1e\x48\xec\x5d\x69\xde\xca\x5b\xed\x8a\xfd\x8d\xb1\x3d\x5a\x52\xeb\x1a\xd0\xf6\xc5\xe2\xfb\xfb\xfa\x12\xf1\xa4\xe8\xcd\xd6\xc8\x4c\xfb\x76\xc9\xd2\xee\xf0\x5f\x9f\xcd\xbf\x47\x23\xf7\xef\xd7\x25\x4b\xbb\xcd\x7f\x32\xde\x1f\x3b\xd4\xe8\xf2\xcc\xc4\x4e\x9f\x5e\x8d\x9e\x2d\xdc\x4f\xbd\xb7\x9f\xfa\x6c\x7e\xea\x7d\xfd\x64\x5a\xf6\x69\xfd\x83\xa6\x2c\x39\xa0\xc5\x13\x03\xb1\xc1\xa4\x96\x3c\x38\x28\x62\x87\x12\x03\x83\x3d\xfb\xfb\x44\x6c\x6f\x4f\x3c\xd1\x37\x98\x90\x16\xaa\x13\xdd\xb1\xef\x0d\x68\xfb\x12\xa2\x7a\x30\x39\x90\xd4\x9e\x14\xd5\x83\xfa\x3e\x93\xb6\xdf\x7f\x7f\x7d\xec\x2b\x26\x89\xc4\x6a\x25\x6d\x04\xdd\x06\x5a\x0b\x1a\x89\x45\xa8\x77\x84\x5a\x23\xd4\xb9\x2e\x42\x9d\x88\x46\x62\xb5\x90\xd7\xa2\x77\x2d\xba\xd7\xa2\x9f\x25\xaf\x6b\x42\xff\x26\xf4\x6f\x42\xbf\x26\xf4\x6b\x5a\x99\x61\x2c\x71\x28\xd1\x97\x8c\xf5\xf4\x1f\x6a\x24\x19\x42\x30\xb8\x3f\xde\x4b\x52\xb2\xd8\x08\x4b\x8d\xb0\x00\x79\x03\x9a\x1b\xe0\xb0\x01\xdd\x20\x27\xba\x0d\xb4\xd6\xa4\x6e\xc7\xf5\x9e\x8e\xeb\x61\xa9\x1e\x9a\xe0\xeb\xb6\x21\x24\xdb\xc0\xd7\x81\xaf\x03\x5f\x0b\xbe\x16\xfa\xe0\x89\x46\x62\x75\x35\x18\x71\x0d\x8d\xac\xce\x2a\x3d\x9f\xeb\x79\x28\x20\x3c\x51\x52\x19\xfd\xf3\x06\xf1\x31\x6b\xe4\x67\x6a\x05\x7f\x0c\x6e\xae\xd4\x61\xfe\xf0\x4f\x15\xd7\x94\xec\xfa\x43\x4c\xce\xe0\xa2\xb8\xaa\x08\x4f\x74\x36\xfc\x35\xa2\xd6\x79\xf7\x36\xdc\xc3\x5a\xfa\x96\xfc\x5d\x1f\xff\xd6\x3e\xc4\x71\x28\xf7\xff\x67\x1f\xff\x27\xe0\x3f\x6a\xf3\x1f\xf4\xf0\x7f\xd2\xc7\x7f\x64\x0d\xd1\x5c\xf3\xff\x91\x8f\xff\x45\x8f\xf9\x17\x7b\xf8\x3f\xe8\xe3\x7f\x0a\xfe\xf9\x79\x9b\xfb\x3f\xe0\xe3\x7f\x09\xfe\x3b\x6d\xfe\x4b\x3c\xfc\xdf\xe9\x93\x3f\xad\x37\x11\xe5\xe7\x0c\xee\xff\x0e\xe1\xed\x3f\x7a\xaf\xdb\xff\x5a\x0f\xff\x9b\xfd\xd6\xff\x56\xa2\xb9\xe2\x5f\xe1\x33\xff\xa9\x7b\x9d\x7e\x4c\xff\xeb\x3c\xfc\x2b\x3e\xfe\x6b\x6e\x23\x9a\x2b\xff\x3e\xf6\x99\xff\x2c\xfc\xdb\xf3\xaf\xd4\xc3\xff\x39\x9f\xf8\x4f\x6d\x21\x9a\x6b\xfe\x67\x7c\xfc\x97\xb5\x38\xfd\x98\xfe\x6f\xf0\xf0\x3f\xe2\xe3\xbf\x92\xae\x13\x73\xe6\xdf\xd3\x3e\xfe\x2b\xe0\xdf\xbe\xfe\xeb\x3d\xfc\xf7\x16\x90\x7f\x5e\x03\x67\xe9\x7f\x53\x12\xfc\xbe\x9a\xd7\xaf\xf7\x03\xde\xfa\x0b\x75\xab\xd3\x7f\xc6\xc7\xff\xd2\xb6\xd5\xe9\x17\xf9\xe8\x87\x1a\x56\xa7\x5f\xe6\x33\xfe\x8a\xc6\xd5\xe9\xd7\xf8\xe8\x47\x9a\xbc\xfb\xf3\xfd\x63\x8b\x8f\xfe\xdd\x3e\xfa\x9c\xbf\x1b\xfa\xec\xb3\x8c\x68\x81\xfe\x1c\x93\xf3\xfc\x89\x04\x7c\xf6\x0f\xe4\x8f\xf5\x7d\xf2\x36\x60\x7f\x9e\x3f\xdf\x0a\xb8\x7d\x4b\x3f\x74\x3d\x2d\x86\x6c\xe7\x97\x06\x9b\xbe\x75\xf2\xfe\x4f\x00\x00\x00\xff\xff\xc5\x76\x4f\xde\xd0\x4c\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 19664, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

