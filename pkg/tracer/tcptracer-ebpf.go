// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6f\x6c\x5b\xd7\x75\xbf\x8f\x14\xad\x3f\x8e\x2b\x25\x2e\x13\x99\x49\x3a\xe5\x0f\x56\x55\x0b\x1c\x4a\x96\x6d\x5a\x59\x12\x35\x6e\x52\x55\x4b\x23\x36\x0d\x3b\x23\x80\x41\x31\x34\x6d\xd1\x52\x6c\x9a\xa4\x63\x3d\x29\x5d\xd5\xfc\x29\x3c\xa2\xdb\xe4\x35\x1b\x04\xc3\x1f\x44\x4b\x69\xb5\xc0\x1b\xf4\x21\x98\x5d\x34\x80\x84\x2c\x18\x84\xad\x18\x8c\xd6\x2d\x84\xce\x03\x84\x2d\x08\xb4\xae\xe8\x84\xd4\xc8\x84\x24\x08\x07\xde\xf3\xbb\xe4\x7b\xe7\xdd\x47\x52\xb2\x87\x7d\xd1\x03\x94\xc3\x73\xee\x3d\xf7\x9c\x7b\xef\xb9\xe7\xfe\xee\x7d\x2f\xfe\xce\x93\x4f\x3f\xe5\x31\x0c\xa1\x1e\x43\xfc\x8f\x28\x73\xe5\x67\xfa\x99\xf2\xef\x5e\xfc\xf7\x01\x61\x88\x85\x3b\x49\xf6\xba\x10\xe2\x73\x42\x88\xf1\xa6\xb5\x42\x91\x37\x63\x29\x29\x1f\x0f\xac\x4b\x7e\xe1\x22\xd5\xab\xf7\x08\xb1\x56\x28\x14\x16\x66\xc0\x7b\x85\x58\x2f\x14\x0a\xad\xcc\xe8\xe5\xba\x72\xbb\x9e\x22\x0f\xf9\x5f\x81\x9a\x77\x85\x99\xdd\x43\xd2\xce\x65\xb4\x33\x1e\x08\x3b\xec\x1e\xd2\xd8\x79\x5d\xf6\x59\x08\xbf\x68\x92\x25\xe6\x36\x92\xd7\xa2\xe7\x15\x42\x1c\xab\x17\xa2\x4d\x08\x71\x06\x34\x52\x4f\x83\x69\xd5\x0f\x57\xb0\xbb\x50\x4f\xbc\xbf\xfe\x63\xea\xd7\x29\xf0\xc6\x3a\xf1\x79\xf4\xcb\x83\x7e\x75\xf4\xd2\xf8\x66\x50\xcf\xfb\x0d\xe9\x47\xc4\xfb\xa1\x6c\xcf\x4c\x37\x48\xf9\xe1\x3b\xd6\x84\xd2\xf3\x48\xbd\xa1\x02\x8d\x4b\x8a\xda\x6b\x44\x7b\xe7\x57\x49\x7e\x7e\x05\x74\x19\xf4\x2a\xe8\x12\xe8\x22\xe8\x15\xd0\x79\xd0\x39\xd0\x69\xd0\x29\xd0\x49\xd0\xb3\xa0\x13\xa0\xa3\xe4\xff\xa9\x16\xcc\x13\xf8\x74\x2b\xfa\x17\xa2\x7a\x1d\x13\x90\xb7\x41\x1e\x84\x9c\xda\x33\x53\xed\x24\x6f\x22\x3b\xe6\xe9\x20\xf1\xcf\x93\x7d\x33\x1b\xa2\xf1\x1b\xa5\x68\x1d\xcf\xc1\xcf\x7e\xf2\xd3\x1c\xed\xa3\xf2\x74\x58\xd8\xfa\xd7\x81\xfe\xe5\xa8\x7f\xb1\x74\x56\x96\xc7\x3b\xae\x83\x1f\x05\x4f\xe3\x95\x4c\xbf\x2c\xf9\xe1\x8e\xf7\xc1\xff\x09\xf8\x0f\x50\x3f\x85\xfa\xcb\x28\x9f\x40\xf9\x2a\xca\x8f\x48\xfe\x98\x87\xe2\x27\x66\x0e\x4a\x7e\xe0\x2f\x69\x7e\x62\xe6\x10\xd1\xcc\x08\xd5\xf3\x52\xbd\x81\x1f\x60\xfe\x7a\x30\x4f\x1d\x34\x4f\x09\xe3\xb0\x9c\x6f\xbf\x31\x8a\x38\xfa\x73\x8a\x6f\xc3\x90\x72\x9f\xf8\x5b\x8a\x0b\xc4\xe3\x70\x60\x50\xea\x35\x7f\x8f\xf8\x85\x3c\xd1\x7a\x43\x88\xc1\x42\xa1\xa0\xe2\x67\x21\x5e\x8e\xdb\xe2\xd2\x4c\xe6\x49\x6f\x38\x40\xfd\xf0\x89\xf3\xe8\xe7\xa7\x05\xa2\x28\xef\xf8\x08\xf4\x06\xfc\x1c\x42\xf9\x3a\xe2\x80\xe6\x5d\xb5\xdf\xbc\xd3\xdd\x8f\x3a\x8b\x7d\xf3\x54\x5b\x55\xbd\x4f\xb5\x7a\xed\x55\xf5\x3e\xb2\xf4\xbb\xac\x17\xac\xaa\x77\x43\xab\x47\x71\xd8\x7c\xa7\xb3\xfe\x10\xea\x37\x68\xc6\xd7\x3c\x45\x71\x6b\xce\xd0\x78\xe9\xec\xad\x6b\xfa\x17\xcb\xd3\xb8\xc6\x03\x4f\x53\xbc\xe5\x6f\x60\x9e\xfa\x89\xbf\xa8\xe6\xa3\x8f\xe2\x6f\x06\xf3\xd5\xf3\x15\xe2\x67\x69\xde\xe2\xfd\x94\x67\xfc\x75\xc7\x28\x8e\xbc\x47\x89\x7a\x12\x88\x2b\x8a\x5b\x95\x9f\xc6\x03\x43\x2c\xff\x8e\xda\xf2\x8d\xd5\xef\x14\xfc\x6e\x81\xdf\x2d\x2c\x5f\xf6\xb2\xfd\x61\x48\x93\x3f\x7d\xe2\x59\xf8\xf1\x45\x99\xff\xfc\xc6\xa3\xb2\xff\xc5\x38\xf7\xc9\x72\x5a\xd7\x65\x7f\xd0\xaf\x00\xf5\xb7\xf9\x29\xf7\x38\xab\x3c\x1f\x83\xae\xf3\xa1\x8b\xb7\xe2\xe8\xc9\xfd\x01\xb4\xd8\x8f\x0f\x0b\x85\x82\xea\xc7\xe1\x96\xce\x92\x9f\x86\xf4\x73\x11\xeb\x29\x68\xf3\x3f\x0e\xff\xcd\x3c\xe5\x47\x5d\x3c\x59\xd7\x09\xf7\x3f\x96\x57\xfd\xbf\x8e\xf6\x1f\xb4\xb5\x5f\xca\x03\xdb\xdc\xdb\xad\x9c\x07\xde\x47\xbb\xbb\x5c\xfc\x0e\xde\xa4\xdf\x2b\x68\x7f\x87\xde\xef\x6f\x6d\xd6\xef\x0f\xd0\x2e\x6d\xb0\xb1\x3c\xd6\x43\x60\xd9\x81\x1f\x6a\x89\xcb\x6a\xb8\xe5\xff\x0d\x2f\xb5\x72\xbc\x14\x66\xeb\xb5\xcf\x61\xb7\x22\x6e\x41\x9c\xf8\xb7\x7d\x22\x6a\xd5\x2b\xae\x53\xf3\xa8\x70\xd4\xef\xab\x09\x1f\xfd\x96\xfa\x51\xc2\x47\xbf\x21\x3e\x1f\x66\xf8\xa8\x0d\xb8\x01\xf5\x3c\x11\xc2\x47\x9e\x0f\x18\x3e\x7a\x5f\x08\x1b\x3e\x52\x79\x6c\x90\x8d\x0b\xf0\x50\x00\xfb\x6c\x00\x78\x08\xeb\x74\x3c\x00\xbc\x10\x00\x1e\x0a\x00\x67\x04\x80\x87\x02\xc0\x43\x01\xe0\xa1\x00\xf0\x50\x00\x78\x88\xe5\x49\x95\x47\xcd\x34\xe1\x23\x33\x03\x5c\xd4\x93\xb2\xed\x9f\x66\x86\xf6\x3f\x33\x0b\x1c\xd4\x8f\xf6\x7a\x80\xa7\x32\x41\x94\x87\x50\x0e\xfb\x3d\xc0\x4f\x19\xe4\xb3\x6c\x1f\xca\xe1\x6f\x0f\xf0\x53\x06\xb8\x48\xf5\xab\x87\xfa\x15\xcb\x02\x0f\xf5\xff\x14\x3c\xf0\x50\x3f\x8d\x4f\x32\x0b\x3c\xd4\x7f\x0d\x3c\xf0\x50\xff\x2f\x51\x1f\x78\xa8\x7f\x09\xe5\xc0\x43\xfd\xcb\x28\x07\xce\xa9\x03\x1e\x3a\x4d\xf8\x67\xe0\x39\xcc\x47\xff\x22\xea\x11\x4e\x8a\x9d\x06\x7e\xf2\x01\x17\x3d\x89\x7a\xcf\xab\x79\x01\x9e\x0c\x50\xfe\x89\x78\xde\x14\xc5\xd0\x5d\xf8\x11\xe2\xaf\x5e\x88\x2b\x85\x42\xa1\x79\x1f\xe2\xd2\x92\x3f\x82\x96\x7d\xca\xb1\x1f\x20\x9f\x8d\xdf\x25\x10\x87\xb0\x73\x17\xc5\x97\x35\xbe\xdb\xd8\xfa\xd5\x9d\x27\x7c\x62\x92\xfa\xd1\x80\xfd\x02\x34\xd2\xf0\x17\xc2\x1e\x8f\x6d\xb6\xfe\x8c\x07\xd6\x40\x57\x91\xcf\x3e\x06\x5d\x87\x7c\xc5\xb6\xef\x99\xa7\x68\x5e\x39\x8e\x29\xfa\xd5\xe2\xd2\xff\x06\xdb\x3e\xe8\xae\xdf\xca\xf4\xdb\x36\xa0\x6f\xd5\x5b\xdb\xa0\xdd\x06\xa6\xbf\xaa\xd5\xaf\x8e\xfb\x3e\xde\x24\xee\x5b\xdf\x20\xee\x5b\xa9\x09\x67\xac\x6c\x08\x67\xc4\x66\xb1\x6f\xf5\xbf\x0c\x9c\xb7\x0e\x9c\x37\x46\xfc\x0c\xe2\x42\xe5\x87\xbf\x51\xe7\x3e\xca\x2b\xe6\x0f\x11\x47\xc7\x91\x5f\x7e\x84\xf8\x1a\xa3\xbc\x68\xce\x21\xee\x72\x94\x1f\x17\xbe\x4b\xfe\x0c\x94\xf2\x71\x0f\xf9\x79\x0e\xf2\x98\x92\xef\x27\xea\xa5\x05\xe6\xf7\xec\xa5\x38\xee\x6f\x40\x5e\x69\x41\x5e\x6b\x65\x79\xb7\xd7\xb6\x7e\x55\x9e\x57\x71\x6f\x1d\x8f\x90\x06\x4f\x46\xea\x69\x83\x52\x7e\x1e\x33\xb0\xae\x40\x5b\xe5\x7e\x51\xc6\x61\xf7\xde\x57\x6f\xf3\xbf\x5a\xfd\xc3\xf7\x7d\x5e\xd2\xc8\x36\x9a\x20\x33\xdf\x80\x75\xf6\x90\xa4\x67\x1a\x49\x2f\x7e\xfe\x41\xe2\xb1\x9e\xe3\x39\xec\x4f\x79\xea\xf7\x75\x83\xfc\x1d\x0e\xb4\x43\xde\xca\xe4\x1d\x8e\x7d\x99\xe7\x93\xa0\x36\x9f\xa0\xff\xec\x1e\xa3\x9a\xde\x46\xf0\x4b\x83\xc4\x11\x21\xed\x7e\x69\x1e\xa3\xbc\x6d\x0e\xa5\x1c\x7e\x2c\x57\xda\xef\x71\x2f\xe1\x6f\xbc\x97\xf4\x31\x1f\x11\xe3\x6e\xb9\x8f\x2f\x9c\xd2\xcf\x4f\x11\xf7\xd7\xcb\x7a\x77\xca\x76\x78\x1c\x0d\x63\x1f\xe3\x78\xce\xfd\x3e\x88\x00\x85\x89\x72\xbf\xb1\x43\xda\xbf\xf5\xed\xbe\x4a\xed\xb2\x71\x36\x0d\xda\x97\x17\x5e\x25\x5e\x97\x07\xe6\x35\x79\x27\x99\x27\x7f\x22\xc6\xaf\x0b\x1e\x1b\x0e\x5f\x43\x7c\xce\xc3\xef\x15\xd0\x4f\x0b\xd6\xfe\xc4\xb1\x8f\x98\xe7\x5a\x6b\xb6\x6f\x3b\x5f\x9f\x6b\xab\xaa\xb7\xa6\xd5\x6b\xaf\xaa\xb7\xa2\xcb\xb3\xe7\x82\x55\xf5\x3e\xd5\xea\x21\x3f\xb7\x3a\xeb\xf7\x5a\xf3\xf3\xab\xe5\xf9\x23\x3d\x95\x9f\x7b\x5d\xf3\xf3\xaa\xf6\x5c\xbe\x8a\xf1\x9d\xa5\x7c\x8c\x73\xc6\x70\xe0\x22\xf2\x35\xe6\xa3\x83\x70\x58\x6c\x06\xf3\xd5\x73\x81\xf8\xd9\x79\xe4\x77\xc2\x67\xfe\xba\x1f\x13\xf5\x12\xce\xf1\x7b\x2e\x13\x35\xfe\x5e\x52\xcd\xbd\xa4\x5c\x1f\x3e\xf1\xb0\xe0\xf1\x3a\x55\x31\x5e\x2f\xd1\xfa\x06\x0e\x1f\x1f\x03\xee\x1d\x03\xbe\x1a\x9b\x77\xe4\x63\x15\x17\x12\x0f\x78\xed\xe3\xf7\xba\xf4\xa1\x98\x37\x7a\x4b\x79\xc3\x90\xe3\x82\xfc\x3e\x46\xfb\x53\x2c\xff\x36\xc6\xeb\x39\xe4\xc5\x29\x1b\x3e\x8e\xe5\x67\x51\x9e\x45\xb9\xc2\x7b\xd8\xaf\xf2\x8b\x36\x3c\x9f\xcc\x4f\xb3\xbc\x9a\x82\xfc\x22\x93\xa7\x49\x7f\x86\xf2\x9a\xba\x6f\x3b\x03\x3a\xde\x83\x73\xd2\x2c\xfa\x5b\x87\x73\x21\xf6\xbb\x56\x8f\x7d\x1c\x2f\xfb\xe8\xbe\xbc\xd8\xef\x5d\x35\x8e\xbb\x57\x8e\xd1\xb7\xc9\x8f\x9b\xce\x03\xd9\x42\x93\x2d\x6f\x4d\xd9\xd6\xfb\x86\xf1\xe3\xb9\xb0\xd6\x1f\x1d\x7e\xec\xd5\xe1\xb0\x0a\xfa\x1c\x3f\x4e\x6d\x40\xbf\x2a\x7e\xac\x60\xb7\x26\xfc\x58\x43\x7e\xd2\xe2\xc7\x1a\xf2\x93\x16\x3f\x56\xc8\x4f\x2b\x35\xe5\xa7\x0d\xe2\xc7\xd2\xbd\xc7\x35\xac\x1f\x15\x1f\x14\x47\xe6\x9b\x88\x1b\x9c\xab\x06\xfc\xd4\x5e\x12\xf7\x8d\xc3\x81\x9f\x21\x8f\x21\x7e\x3a\xae\x62\x1d\x01\x67\xf6\xd0\x79\xcf\x9c\x45\xbc\xe1\x1c\xe7\xf7\x11\x1e\x1a\x38\x48\xed\xf9\xbd\x5f\x40\x3e\xbb\x17\xf9\xec\x1e\x97\x7c\xb6\x4d\xe6\x33\xeb\x7a\x9a\xaf\xb8\x9e\x76\x3a\xf6\x69\xb7\xfa\x94\xf7\x76\xb0\xbc\x87\x73\xfd\x18\xce\xc9\x63\x53\x8e\xbc\x37\x75\x53\x79\x6f\x92\xe5\x31\xe0\xf2\xfc\xbc\x2d\xef\x99\x79\x75\xff\x30\xc1\xf2\x9c\xca\x9b\x17\x6c\x79\x33\x96\xbf\x06\xfe\xfb\xc8\x77\x57\x59\xbe\x3b\x0b\xf9\xcf\x98\x3c\x57\x53\x1e\x34\xf3\x73\xb6\x3c\x6b\xe6\xa7\x6d\x79\x78\x23\x79\xf2\x90\x25\x4f\xfa\xc4\x7b\xa4\x0f\xbc\xc9\xf1\x65\xf9\x1e\x2b\x58\xe2\xe5\x7a\xa0\xe3\xb7\x30\x93\x1b\xc4\x9d\xa5\x7b\xa6\x87\x48\x1f\x38\x33\x62\x74\xc8\xf8\x19\x3f\x4e\xf8\x7c\x01\xef\x49\x2e\xc3\x4e\x3c\x47\xe3\x3b\x9e\x43\x7c\xe3\xdc\xb7\x80\xf7\x33\xba\xf5\xb7\xa4\x3d\x9f\xaa\x75\xbb\xe4\xba\x6e\xaf\x69\xd6\xed\x78\x8e\xe6\x67\x38\x37\xed\x88\xef\xd0\x86\x70\x68\x33\xe1\xeb\x21\x8c\xdf\x0f\xdb\x19\xae\x87\x9d\xc0\xcd\xda\x19\xa8\x8c\x77\x2b\x8c\xdb\xb4\x76\x9f\x83\x3f\xcc\xef\x88\xb1\xea\x82\x7f\x27\x5d\xf0\x6f\xc8\x8e\x7f\xd5\x7b\xa9\x0a\xfe\x4c\x56\x7a\x2f\x55\x41\x4f\x8b\x7f\xd5\xfd\x44\x05\x3d\x2d\xfe\x55\xf7\x13\x15\xf4\xb4\xf8\x57\xdd\x4f\xec\x72\xd6\x0f\x59\xf7\x97\x1f\x94\xe7\xd3\x1e\xa7\xa1\x4d\xe2\xdf\x4b\x0c\xff\xbe\xc5\xf0\xef\x1c\xc3\xbf\xb3\xc0\xbf\x93\xc0\xbf\xd3\xc0\xbf\x94\x60\xfd\x5e\x8a\x2f\xbf\x87\x26\x3a\x62\xfc\x98\xfc\xb1\xc4\x67\x31\x6e\x7c\xe2\xd2\x2d\x89\xb3\x88\x31\xc7\xf0\xd4\xa4\x2d\x7e\x36\x7d\x1f\xc7\xfc\xd1\xe1\xa9\x50\xa5\x7b\x31\x8d\x3e\xc7\x53\x93\x1b\xd0\xaf\xf9\x3e\x4e\x63\x77\x43\xf7\x71\x15\xec\x56\xbc\x8f\xab\xa0\x57\xf1\x3e\x4e\x13\xef\x2b\x35\xc5\xfb\x66\xf1\x14\xed\x63\xc9\x59\xe0\xa4\xfe\x77\x89\x9f\x46\x5c\x34\x2d\x62\xdf\x04\x4e\xc2\xfb\x04\xf3\x22\xe2\xa8\x43\xe1\x2f\xc4\xd7\xf3\xf8\x7e\x61\x46\xdd\xe7\xd3\x7a\x59\xa0\x6b\x36\x31\xf0\xc7\x44\xfd\xf5\xf4\x7e\x74\x01\xf7\xd3\x03\x5f\x54\xf2\x01\xa2\x82\x3e\xe8\xf1\xd7\x7d\x5d\xd2\x88\xcf\x27\x29\xdf\xe7\x5b\xe5\x7d\x90\xe5\x9e\xec\x20\xdd\x2b\x45\x3c\xb4\x41\x56\xbf\x27\x1b\x29\x8d\xa7\x8f\xdd\x17\x79\xe5\xf8\x28\x1c\x41\xfb\xb8\x6a\x47\xbd\xbf\x8e\xe5\x2f\x61\x1c\x07\xc1\xbf\x03\xfe\x08\xf8\xf7\xc0\x8f\x20\xaf\x2c\x32\x1c\x33\x04\xf9\xbb\x4c\x7e\x9c\x70\x0d\xbb\x6f\x1f\xcf\xf5\xb2\x7d\x4f\xbd\x17\x0a\xc3\x4e\x0a\x34\xeb\xc0\x7f\x61\xcd\x3d\x64\x32\x7f\x1c\xf9\x0d\xe7\xd6\x19\xf8\x8d\xf7\xec\xfe\xba\x66\x9a\x07\xef\xe7\x88\x7a\xe8\xfd\xa6\xdf\xb8\x8d\xe6\xcf\x82\x9f\x42\x15\xf0\x93\x3a\x07\xf0\xf3\x66\x35\xfb\xf1\x9e\x37\x90\x57\x29\x9e\xae\xc3\xff\xe1\x8e\x29\x36\x5e\xe7\x31\xde\x23\xe8\xff\x05\x07\x0e\x98\xac\x88\xbf\x0d\x47\xfd\xe9\x8a\xf5\x3f\xf9\xec\x66\xe2\xc6\x6d\xfe\xca\xb8\x7a\xda\x86\x5b\xcb\x71\xa6\xe2\x68\xce\x25\x8e\xde\xda\x50\x1c\x55\x8b\x8f\x9b\x9d\x5f\x9f\xf8\xe5\x4d\x8d\x53\x19\xbf\x0f\x69\xc7\xa5\x7c\x1e\xc1\x7b\x83\xd2\x79\x24\xc5\xd6\xdf\x6b\x2e\xeb\x6f\xc2\x65\xfd\xbd\xb2\xc9\xf5\x77\x16\xf4\xfb\xff\x67\xe3\x7b\x48\x8e\xe5\xcf\xc9\x8f\xd2\x7b\x65\xb5\x7f\x63\x3c\x77\xd9\xdf\xa7\xab\xf7\xe1\xfc\x1c\xe2\x6f\xfc\xb2\xe0\x71\xaf\x7b\x7f\xef\x3c\x87\xd0\xfb\x94\xf2\x39\x24\x44\xe7\x10\x35\x3e\x68\x7f\x38\x87\xef\x7b\x72\x1f\x01\x4f\x54\xdf\x1f\xf5\xdf\x29\xe9\xf5\x8a\xfb\xb9\x47\x54\xff\x3e\x2a\x9e\xc3\x7e\x95\x53\xf8\xb9\xfa\x39\x48\x8f\x0b\xd4\x7e\xbb\xea\xba\xdf\xea\xf0\xf3\x78\x0e\xb8\x3e\xe7\xfc\xee\xd3\x2d\x2f\xd5\x76\xcf\xaf\xce\x0b\x37\xdb\xee\xe3\x9b\x3e\xf7\xc8\xb8\x6e\xc0\xfb\x18\x07\x2e\x0d\x03\x97\xfe\x67\xc1\x63\xcb\x03\xc0\xcb\x38\x17\x96\xcf\x41\xd5\xbe\x5b\xa0\xf3\xe7\x99\x6d\xc8\x13\xc7\x81\xbf\xf3\x6b\x36\x3c\x63\xce\xf5\xba\xac\x5f\x7c\x3f\x50\xc3\xf9\xe9\x4a\x85\xf3\x93\x0e\xa7\xbd\x63\xfd\x4e\x88\xe1\xb4\x64\x1e\xdf\xb5\xa1\x7f\xea\xbb\xb7\x72\xbe\x79\xd7\x91\x2f\xe6\x34\xf9\x22\x86\x7c\xe7\x37\xfe\xc9\x86\x37\xfc\xc6\x92\x2d\xbf\xf9\x8d\x7f\xb4\xe5\x35\xbf\x81\xfb\x0a\x4b\xbe\x99\x94\xe7\x8e\x6f\xdf\xe2\x79\xbe\x2c\xcf\x1f\xd5\xe7\x79\xb3\xdf\xad\xac\xb0\xf9\xbe\x5e\xd3\x7c\xab\xbc\xaa\xf6\x17\x75\x6f\xa3\xde\x77\xd4\x72\xce\xd0\xdf\x8b\xd4\x7e\xce\xb8\xba\x41\x7d\x7e\xbe\xba\x52\x41\x5f\xc5\x63\x7d\xa3\xf3\x5c\xb5\x58\xe1\xfc\x50\x8e\xcb\x65\x97\xb8\xfc\x55\x4d\x71\x69\xe2\xde\xce\xbc\x88\x7b\xa6\x19\x9c\x1b\x66\x69\x1e\x23\x75\x78\xdf\x4b\xaf\xd7\x4b\xdf\xc3\x9c\x01\xa5\xd5\x68\xc1\xf1\x3e\xda\x68\x22\x1e\xe4\x7d\x7f\x6d\x7a\x87\x7d\x1d\xa5\xfe\x51\xfc\x01\x57\xe5\xca\xdf\xdf\x7b\x2c\x78\x3d\x7e\x9c\xe3\x74\x75\x4f\xa9\xee\x25\xf1\xbd\x42\x7e\x19\xe3\xa4\xf0\xc2\xaf\xc0\xbf\xc2\xe2\xf1\x35\x86\x0f\xec\xdf\x4d\x55\xc2\x07\x43\xda\xf5\x3e\x8a\xf5\xab\xce\x1b\x2f\x83\xc7\xf7\xb2\xf9\x09\xf0\x7d\xe0\x5f\x01\xff\x94\x63\xbd\x17\xd7\xaf\x99\xa7\x7a\xb5\xe3\xb7\x47\x65\xfd\xf2\xfd\xf7\x23\xc4\xdf\x07\xde\x38\x60\x1b\x1f\xbf\xb1\xdf\x36\x3e\x7e\x63\xaf\x36\xef\xd4\xe2\x07\xe1\x9c\xdf\x92\xbe\xe3\xbb\x44\xc2\x3b\xea\xbb\xd5\x78\x13\xc5\x6d\xf9\x3b\xc5\x55\xc7\x7e\x78\xa3\xf2\xff\x5f\x21\xf9\x58\x69\x3f\x74\x7e\x27\xb5\xce\xbe\x4f\x58\xbd\x25\xdf\x57\x3a\xbf\xa7\xac\x0d\x7f\x3d\xa8\xf5\xcf\xed\xbc\xc2\x71\x9f\x5a\x1f\xe5\x38\xb5\xdf\x0b\xa9\x3c\xeb\xf8\xbe\xb0\xe9\x4a\x29\xbe\x25\xae\x42\xde\x2e\xdf\x27\xfc\xd4\x25\x0f\xe3\xbb\x38\xe0\x45\x75\xdf\xa9\xcb\x8f\x6e\xf8\xf8\xca\x26\xce\x1f\x7c\xfc\xeb\x2c\x7f\xa2\x4e\x6c\x3d\x78\xb6\xc6\x45\xff\x18\x58\x37\x72\xd9\x6c\x8d\x4b\xe9\xd9\x1a\x17\xfd\x63\x20\x6f\x49\x5c\xb2\x35\x2e\xa5\xa7\x38\x2e\xed\x5b\xe3\xe2\x78\xd4\x3a\xda\xca\xbb\xf6\xc7\xd8\xda\x8f\xb4\x8f\x8a\x97\xb3\xf8\xbd\xf5\xd0\xf3\xd5\xf0\xd3\xe2\xb3\x42\xa1\xd0\x02\xde\x18\x7b\x56\x34\xbc\xbc\x5d\xbe\xa5\x68\x2d\x9d\x13\xe9\x19\xb5\xfc\xbe\x47\x08\xd1\x6d\xe1\xaf\x34\xd8\xdb\x2d\x96\x3f\xe7\xa2\xab\xca\xb3\x16\xbe\x4f\xa3\xff\x86\x85\x4f\x35\x39\xcb\xdf\xb6\xf0\x13\xb7\x39\xcb\xaf\x59\xf8\x55\x4d\xfb\x37\x2c\xfc\x92\xc6\xbf\xcf\x5b\x02\x65\xa2\xc6\xa0\xe9\x90\x6b\xce\x27\x1a\xb6\xd9\xe5\x6f\x7b\x49\xbe\xca\xe4\x5f\x86\x7c\xba\xde\x2e\xf7\x42\xde\xeb\xb5\xcb\xff\xd4\x43\xf2\x3e\x56\x3f\x0d\xb9\x60\xfd\x3c\x08\x79\x3b\xb3\x1b\x80\x9f\x87\x58\xfd\x5f\xc3\xee\x10\x93\xff\x33\xe4\x53\xcc\x9f\x67\xd1\xfe\x14\xab\xff\x07\x90\xcf\x31\xf9\x01\xa9\xdf\x28\xda\x99\xff\xdf\xf5\x90\x7c\x90\xc9\x8f\x43\xbe\xce\xe4\x8f\x40\xde\xce\xda\x7f\xa2\x8e\xe4\x21\x26\xff\x23\xd4\x9f\x63\xfe\x5f\x92\xfc\x76\xb1\xc4\xe4\x9f\x78\x48\xde\xeb\xb3\xcb\x5f\x80\xfc\x10\x8b\x87\x3d\x90\xa7\x58\xfd\xfb\xd0\xfe\x24\xf3\xe7\xbf\x50\x7f\x91\xc9\xff\x0c\xf5\xe7\xec\x62\xf9\xfe\xae\x28\xe7\xc9\x6b\x0c\xf2\x21\x26\xbf\x5f\x8e\xc3\x0e\x11\x62\x7b\xc0\xc7\x5e\x92\xcf\x37\xda\xe5\x3f\x87\x5c\xb0\x75\xd6\x09\xf9\x32\x6b\xff\x77\x1e\x92\x87\x59\xfb\x77\xc0\xee\x55\xd6\xfe\x05\xb4\x33\xc5\xe6\xf1\x3f\xd0\xce\x12\x93\x37\xa1\x9d\x41\xd6\xce\xbf\xa3\x9d\xf6\xed\x76\xf9\x3f\x40\xde\xca\xe4\x6f\xb8\xf8\xff\x3d\xc8\x53\x4c\x7e\x07\xe4\x7c\xbd\xff\x02\x7e\xae\x32\xf9\x87\xb2\x7e\xb3\x08\xb2\x79\x9c\x85\x3c\xcc\xce\xdb\x5f\x82\xbc\x8f\x8d\xdb\xf3\x1e\x92\xaf\xb0\x75\xda\x53\x47\xf2\x56\x36\x3e\xbb\xd0\x0e\x5f\xa7\x5d\xa8\xcf\xd7\xb5\xa7\x4e\xef\xcf\x76\xb4\xb3\xce\xfa\xf5\x2f\xf0\x67\x90\xd5\x7f\x47\xd6\xbf\x5d\x5c\xb1\x8b\xc5\xbf\x4a\xf9\x4e\xc7\x78\x0a\x79\x8f\xe2\x75\x0a\xa5\xdc\xe7\x22\xaf\x77\x91\x37\xba\xc8\xb7\xbb\xc8\x77\xb8\xc8\x9b\x5d\xe4\xb7\xbb\xc8\x77\x3a\x64\x75\xf2\xbe\xe5\x0b\x0e\xf9\xd7\xe5\xfd\xef\xef\x39\xe4\x2f\xc8\x7b\xe9\xbb\x1c\xf2\xb7\x64\x3b\xad\x0e\xf9\x63\xb2\x9d\x7b\x1c\xf2\x27\xe5\x39\xe9\x6e\x87\x7c\x44\xd6\x77\xfa\xff\x6f\x52\xee\x1c\x87\xbf\x93\x72\xe7\xb8\xfd\x42\xb6\xef\x9c\xaf\x17\xa5\xdc\x39\x2f\xdf\x92\xed\x38\xc7\xa7\x5e\xd6\x77\x8e\xf3\x4f\xa4\xdc\x39\xef\xdf\x94\x72\xe7\xfc\x3e\x23\xc7\xcd\xef\x90\xff\xb5\x1c\xb7\x3b\x1d\xf2\x76\xe9\xcf\xbd\x0e\xf9\xa8\x6c\x67\x97\x43\xbe\x28\xdb\x09\x38\xe4\x7d\xa0\xc5\x70\x7e\x42\x08\x11\x62\x7c\x8a\xf1\xf3\x16\xfe\x1b\x42\x88\x35\x5f\x99\x7f\xb6\x88\x3b\x1b\xec\xe5\xd6\xf6\x0f\xb2\xf6\x0f\xb2\xf6\x8b\xfc\x34\x6b\x7f\xd2\x6b\xe7\x57\xea\xed\xf6\x5a\x2d\xf6\xbe\xc9\xec\x15\xeb\x5f\x65\x7c\xbb\x61\xe7\x97\xbd\xf6\xf6\xda\x2c\xfd\x19\x10\x42\x84\x59\xff\xa6\x99\xbd\xab\xdc\x7e\x53\x99\x0f\xe3\xcf\x6a\xaf\x97\xd9\x9f\x63\x7c\x6b\xa3\xdd\xfe\x7c\xa3\xdd\xfe\x4a\xa3\xdd\xde\x7a\x93\xbd\xfe\xa1\xdb\xec\xf6\x0f\x31\xfb\x4b\xcc\x5e\x9b\xc7\xce\x87\x1a\xec\xed\x2d\x36\xd8\xdb\xb3\x8e\xef\x57\x84\x10\x53\x16\xfe\x49\x9c\xe1\xad\xfc\x20\xe3\xfb\x0c\x7b\xfb\xf7\x58\xca\xf7\xb3\xf8\x08\x31\xff\x0f\x58\xf0\x75\x91\xef\x61\xf6\x1f\x29\xe2\x73\x0b\xff\x87\xc5\xf9\xb5\xf0\x8f\x16\xc7\xcb\xc2\x3f\x86\x7f\xcf\x42\xf1\x8f\x17\x7f\xec\xce\x26\x46\xb3\x62\x38\x9d\xc8\xa6\xd2\x27\x5f\x48\x44\xa3\xc9\x13\x89\x6c\x34\x9e\x19\x8e\xc6\xe2\xf1\x44\x2a\x2b\x76\xa7\x13\x23\xa5\xe2\x87\x79\xe9\x8b\xb1\x54\xe6\xe1\xa3\x47\x92\x27\x32\xd9\xd8\xc8\x48\x34\x9d\xb0\xb5\x95\x8d\xa7\xa2\x2f\xed\x8b\xc6\x4f\x9e\x38\x91\x88\x67\xc5\xb0\x5e\x6c\xb7\xa0\x2b\xd4\x96\x70\x3b\xdd\x7a\x3b\xdd\x95\xec\x74\xbb\xda\x29\x97\xc8\x2e\x66\xe3\xa9\x6c\x3a\x16\x4f\xa4\xa3\x99\x6c\x2c\x7b\x3a\xc3\x3b\x9e\x4a\x1e\xc9\x88\xe8\x4b\x89\x74\x26\x79\xf2\x84\xd5\xb5\xa3\x47\xa2\xa8\x53\x72\xcb\x22\xb2\xbb\xc4\x0b\x1c\x52\x6b\xc7\x32\x89\xac\xf4\x25\xc1\x5d\x2f\x17\x58\xab\xc7\x47\x4e\x66\x1c\x55\x49\x18\x1d\x49\xc6\x13\x27\x50\xba\x3b\x31\x14\x3d\x9a\x8e\xbd\x98\x10\xbb\x33\xd9\x74\x36\xf6\x82\xd8\x9d\x31\x5f\x2c\xd2\xa7\x9f\x78\xa2\x33\xda\x75\xa0\x48\xbb\xa3\x9d\x92\xee\x01\xed\x2c\xf1\x21\x54\x93\x74\x5f\xb4\x33\x84\xea\x21\x54\x47\xb9\x92\xef\x87\x78\x3f\xc4\xfb\x4b\xa3\x1d\x4d\xbc\x94\x38\x91\x8d\x26\x53\x2f\xed\x23\x19\xa6\x23\x73\x32\x3e\x6c\x91\x66\x4f\xa7\x46\x12\xa9\xe4\x11\x12\x49\x9b\x92\xec\x25\xd2\xad\xb8\x2e\xb0\x5d\xe0\x3b\xc1\x13\xed\x04\xdd\x17\xdd\x4b\xc5\x7b\x89\xeb\xda\x0b\x2d\xf0\x9d\x28\x26\xba\x07\xb4\xb3\x48\x9d\x7e\x77\x6b\xfd\xee\x76\xfa\xdd\x4d\x8d\x76\x93\x2d\x70\x7b\x40\xbb\xba\x61\x1a\xc5\x44\x3b\x41\xf7\x47\xf7\xa0\xfa\x1e\x0c\x3c\xf8\x4e\x49\x43\xd1\x2e\x14\x77\xa1\xb8\x0b\xad\x41\xde\x09\x7e\x4f\x27\xea\x81\x76\x75\xa2\x3e\xf8\x4e\xf0\x44\xf7\x45\xf7\x04\x31\x40\x41\x1a\x88\xae\xa0\xb8\x35\xcf\xdd\x1e\xa1\x45\x95\xe1\x7e\xa2\xfd\x0c\x5f\x73\x58\x6a\xe0\x8f\xc1\x6d\xfc\x1b\x78\xce\x87\x5f\xa5\xed\x30\x2a\xeb\xf3\xfb\x0e\x06\xc7\x45\xa3\x21\xb4\x68\xb6\xf7\xab\x44\xd5\x7d\xcc\xfd\x78\x0f\xa9\xf4\x95\x7c\xcd\xc5\x7f\x95\xe7\xf9\x7d\x0c\xb7\xff\x1b\xa1\xb7\x1f\x86\xfd\xb0\xc5\xbe\x4f\x63\xff\x4d\x17\xfb\x29\x34\x5a\xad\xff\x79\x17\xfb\xd3\x9a\xfe\xd7\x6b\xec\x9f\x75\xb1\xbf\x8a\x46\xf9\x7d\x12\xb7\xff\x9a\x8b\xfd\x79\xd8\x1f\xb4\xd8\x6f\xd4\xd8\x5f\x72\x99\xff\xe0\x1d\x44\xf9\x7d\x15\xb7\xff\x9e\xcb\xfc\xb7\x00\x48\x4c\x5a\xec\x6f\xd7\xd8\xff\x9d\x8b\xfd\x69\x00\x07\x7e\x1f\xc6\xed\xff\xb7\x8b\xfd\x69\xd8\x9f\xb0\xd8\xdf\xa1\xb1\xff\xfb\x2e\xe3\xdf\xf6\x25\xa2\xfc\xbe\x8d\xdb\xbf\xdf\x65\xfc\xdb\xbe\x46\xd4\x1a\x7f\xcd\x1a\xfb\x17\x5c\xfa\xdf\xd0\x45\x94\xdf\xe7\x71\xfb\x53\x2e\xfd\x4f\xc1\x7e\x9b\xc5\xfe\xed\x1a\xfb\xaf\xba\xd8\xbf\x0a\xfb\xfc\xfe\x80\xdb\xff\x8e\x8b\xfd\x49\xd8\x0f\x5a\xec\xef\xd4\xd8\xff\x9a\x97\xec\xf3\x1c\x18\xc6\xa5\x2c\xff\x9e\x81\xe7\xaf\x73\x1e\xbd\xfe\xd0\xde\xda\xf4\x0f\xbb\xd8\x9f\xd8\x57\x9b\xfe\x9b\x2e\xf6\xa7\xf6\xd7\xa6\x9f\x71\xb1\x3f\x1f\xaa\x4d\xff\x27\x2e\xf6\x97\x0e\xd4\xa6\xdf\x2b\xf4\xfa\x2b\x3d\xb5\xe9\x1f\x30\xf4\xfa\xeb\x8f\xd4\xa6\xff\x80\x8b\x7e\xcb\xa3\xb5\xe9\xfb\x5c\xfa\xdf\xfe\x98\xbe\x3e\xdf\x3f\x9f\x71\xb1\xff\x90\x8b\x3e\xe7\x6f\x87\x7d\x76\xbd\x24\x82\xd0\x0f\x56\x59\x3f\x3b\x3c\xfa\xf5\xb3\x88\xf5\x63\xcd\x9f\x6d\x9a\xf5\xf3\x80\xc7\x69\xbb\xf8\x0c\x3e\x4e\xd4\x7a\x9e\xee\xb5\xe8\xab\x9b\x9a\xff\x0d\x00\x00\xff\xff\xcd\x76\x9c\xf6\x60\x57\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 22368, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

