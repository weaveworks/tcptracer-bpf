// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x7f\x6c\x5b\x57\xf5\xbf\xcf\x8e\x6b\xa7\x55\x97\x6c\x95\xbb\xd4\xfd\xee\xab\x14\xca\x16\x85\x29\x75\x7e\x7b\x66\x3f\xb2\x5f\x5d\x88\x26\x12\xaa\x66\x8b\x2a\x15\xd7\x73\x9d\x26\x4b\x9b\x3a\xb6\xd3\xfa\x35\xd9\xc8\x26\x36\x55\x11\x4c\x61\x1d\x52\x35\x24\x54\xa7\x81\x66\x48\x48\x83\x7f\x1a\xa1\x42\x42\xb5\x3f\x22\xe0\x8f\x0a\x26\x14\x4a\x91\x22\x98\xa6\x32\xf8\x23\x1a\x55\x89\xca\xd8\x43\xef\x9e\xcf\xb3\xdf\x3b\xef\x3d\x3b\xdd\x26\x21\x81\x9f\x94\x1e\x9f\xcf\xbd\xe7\x9e\x73\xee\x3d\xf7\xdc\xf3\xde\xed\xd7\x9f\x7c\x7a\xaf\x47\x51\x84\xf1\x28\xe2\x1f\xa2\xc8\x15\x9f\x86\x27\x8a\xbf\xbb\xf0\xef\x2e\xa1\x88\xc5\xed\x84\xbd\x22\x84\xb8\x43\x08\x31\xb1\x79\x4d\xd3\x79\x35\x9e\x92\xf8\x44\x68\x5d\xf2\x8b\xb3\xd4\xcf\xef\x11\x62\x4d\xd3\xb4\xc5\xf3\xe0\xbd\x42\xac\x6b\x9a\x56\xc7\x94\x5e\xac\x2a\x8e\xeb\xd1\x79\xe0\xdf\x01\x55\xef\xee\x63\x7a\xbb\xa5\x9e\x8b\x18\x67\x22\xd4\x65\xd3\xdb\xed\xa0\xe7\x15\xe9\xb3\x10\x41\x71\x87\x6c\x51\x37\x11\xbe\x11\x39\xaf\x10\xe2\x88\x5f\x88\x7a\x21\xc4\x49\xd0\x7e\xbf\x4f\xe1\xf2\x5d\x25\xf4\x2e\xfa\x89\x0f\xfa\x3f\x26\xbf\xc6\xc0\x2b\x1f\x11\x9f\x87\x5f\x1e\xf8\xd5\x18\xa6\xf9\xcd\xa0\x9f\xf7\xab\xd2\x8e\x7e\xef\x4d\x39\x9e\x9a\x0e\x48\xfc\xe0\x5d\x37\x68\x1e\xab\x21\xf7\xe6\x75\x8d\xe8\x2a\xe8\x0a\xe8\x15\xd0\x65\xd0\x25\xd0\x05\xd0\xb7\x41\xe7\x41\xcf\x81\x9e\x05\x9d\x01\x3d\x0d\x3a\x05\x9a\x2b\xd8\xed\x91\x76\x0f\x11\x1e\x4a\x91\xfd\x63\xb5\x58\x27\xea\xa7\xa6\xeb\xe0\x5f\x03\xf5\x6b\x9c\x02\x5e\x0f\xbc\x1e\x38\xe9\x51\x53\x0d\x84\x6f\x26\xfd\xea\x78\x98\xf8\x03\x64\x97\x9a\x8d\xd0\xfc\xe5\x28\x5a\x27\xa6\x61\x7f\x0f\xd9\xaf\xe6\xba\xa9\x3d\xdd\x87\xf1\xe1\xef\xf4\xdb\x96\x79\x88\xa7\xb3\xb2\x3d\xd1\x78\x0d\x7c\x0e\x3c\xcd\xe3\x70\x7a\x52\xf2\x23\x8d\xef\x81\x7f\x11\xfc\xfb\xe8\x9f\x42\xff\x15\xb4\x4f\xa1\xfd\x3a\xda\x0f\x4b\xfe\x88\x87\xe2\x27\xae\x1e\x92\x7c\xef\xeb\xb4\x6e\x71\x75\x88\x68\xe6\x28\xf5\xf3\x52\xbf\xde\x33\x58\xd7\x28\xd6\xaf\x91\xd6\x2f\xa9\xc4\xe5\x7c\x07\x95\x49\xc4\xd1\xeb\x14\xdf\x8a\x22\x71\x9f\xf8\x31\xc5\x05\xe2\x71\x24\xb4\x4f\xca\xd5\xbc\x4a\xfc\x62\x9e\xa8\x5f\x11\x62\x9f\xa6\x69\xc6\xfa\x2d\x26\x8a\x71\xab\x6f\xcd\xe1\x3c\xc9\x8d\x84\xc8\x0f\x9f\xf8\x1e\xfc\x1c\xd0\x88\x7e\x44\xed\x8d\xfb\x41\x6f\xc2\xce\x21\xb4\xaf\x23\x0e\x68\xdd\x8d\xf1\x6b\xb6\xd9\xed\x18\x80\x1d\x55\x26\xfd\xea\x58\x7d\x59\xb9\x8f\x1c\xe5\x1a\xca\xca\xed\x37\xf9\x5d\x94\x0b\x97\x95\xbb\xe9\x28\x47\x71\x58\xb3\xdd\xde\x7f\x08\xfd\x03\x0e\xf3\xab\x8e\x51\xdc\xaa\xe7\x69\xbe\x9c\xf4\xad\x3b\xf8\x17\x9f\xc3\xfc\xf7\x50\x9e\x88\x9f\xa7\x75\x48\x44\xdb\x28\xfe\x66\x8d\xf5\x88\x10\x9f\xbf\x89\x75\x8c\x52\xff\xef\xd3\xba\x24\x0e\x3c\x28\x69\xb0\x6a\xc4\x12\x77\x27\x41\x83\x5e\x8a\xcb\x67\x3d\x42\x68\x9a\x10\x41\xcf\x20\xf1\x0a\x78\x85\xe2\xda\xc8\x5f\x13\xa1\x21\x96\x9f\x73\x96\x7c\x60\xf6\x2b\x05\xbf\x6a\xe1\x57\x2d\xcb\xa7\x61\x76\x7e\x0c\x39\xe4\x57\x9f\xd8\x27\x69\x50\xb9\x4f\xe6\xc7\xa0\xf2\x90\x9c\x1f\x7d\x1f\xf8\x64\x3b\xed\x7b\xc3\x9e\x44\x68\x3f\xec\xa1\xf9\xab\xd9\xeb\x1e\x87\xa5\xd7\x6b\xc0\x75\xbd\xf6\x3b\xac\xd7\x11\x81\x79\x05\xd5\xfd\xf8\x50\xd3\x34\xc3\x8f\x83\xb5\xcd\x05\x3b\x15\x69\xdf\x12\xf6\x5b\x98\xd9\x4f\xeb\xac\xe6\x29\x7f\x3a\xc5\x9b\x79\x3f\x70\xfb\xe3\x79\xc4\x49\xe8\x1a\xc6\xdf\x6d\x19\x7f\x24\x44\x71\x52\xb3\xc9\x3e\xee\xcd\x92\x79\xc2\x88\xaf\xf7\x30\xee\x0e\x66\x37\xf2\x40\xbe\xde\xd5\xee\xf5\x92\x76\x23\x5e\x43\xab\x18\x7f\x2b\xb3\x7b\x90\xc6\x7d\xc6\x3e\xee\x60\x49\xbb\x07\x61\xf7\xfb\x18\x97\x0e\xe0\x78\x7e\x3f\xf4\xad\xd8\xea\x8b\x8d\xc4\x65\xb9\xba\xe6\x3f\x56\x4f\xd5\xf1\x7a\xaa\x8f\xed\xd7\x6e\x9b\xde\xbe\x52\x75\x0d\xe2\x24\xb8\x89\x42\x79\x23\x72\xfa\x3e\x55\x07\x85\xad\x7f\xa9\xba\xad\x58\x3f\x7d\x48\x7e\x14\xea\xa7\x35\xe2\x67\xb9\x1f\xf5\x9a\xb5\x5f\x3f\xd5\x4f\xca\x07\x54\x3f\x8d\xa1\x7e\xda\x75\x5d\x58\xe5\x50\x2f\x85\x70\xde\x86\x50\x2f\x61\x3f\x4e\x84\x50\x3f\x84\x50\x3f\x84\x50\x6f\x84\x50\x2f\x85\x50\x2f\x85\x50\x2f\x85\x50\x2f\x85\x50\x2f\xb1\x7c\x58\xc8\x97\x5e\xd4\x4f\xd1\x01\x9c\x9f\x87\x50\x17\x51\xfd\xa4\x66\x50\x37\x45\x53\x96\xf3\x55\xcd\xd0\xf9\xa8\x66\x51\x27\xf5\x40\x4f\x14\xf5\x56\x26\x8c\xf6\x08\xda\x61\x57\x14\xf5\x55\x06\xf9\x2c\xdb\x8d\x76\xf8\x11\x45\x7d\x95\x41\xdd\x14\x9d\xb7\xf8\x1d\xcf\xa2\x5e\xea\xf9\x35\x78\xd4\x4b\x3d\x34\x6f\xc3\x59\xd4\x4b\x3d\xef\x82\x47\xbd\xd4\xf3\x3b\xf4\x47\xbd\xd4\xb3\x8c\x76\xd4\x4b\x3d\x2b\x68\x47\x1d\x54\x85\x7a\x69\x9c\xce\xa1\xde\xfd\x58\xa7\x1e\xd4\x6d\x59\xaa\xa3\xe2\xe3\xa8\xaf\x7c\xa8\x9b\x9e\x44\xbf\x03\xc6\x7a\x45\x40\xe9\xbc\xec\xf7\xbc\x25\xf4\xd0\x5d\xbc\x80\xf8\xf3\x0b\xb1\xa0\x69\x5a\x4d\x07\xe2\xd2\x94\x3f\xc2\xa6\x73\xca\x76\x1e\xe4\x31\xee\xdd\x14\x4f\x6a\x3e\x0c\x1e\xe3\x98\xe2\xbb\x9e\xed\xdf\x01\xc7\xf3\xec\x0d\xf2\x23\x80\xf3\x02\xb4\x3f\x70\x86\xc5\x29\xf4\x20\xce\x27\x42\x6b\xa0\xd7\x91\xcf\x6e\x81\xae\x03\x5f\x45\x3e\xc3\xf9\x31\x46\xeb\xca\xeb\x1c\xdd\xae\x5a\x17\xff\x03\x96\x73\xd0\x5d\xbe\x8e\xc9\xd7\xdf\x86\xbc\x59\x6e\xed\x36\xf5\x06\x98\xfc\x75\x47\xf9\xf2\x75\xe1\xad\x4f\x58\x17\xae\xdf\x66\x5d\xb8\xba\xa1\x3a\x63\xd5\xb5\xce\x70\xac\x7b\xdf\x42\x5c\xbc\x49\x79\x44\xfd\x01\xe2\xe3\x79\xca\x27\x8b\x71\x92\xef\xfd\x36\x51\xf5\x02\xe2\xe6\x14\xf2\xc9\x3c\xde\x1f\xa7\x29\xcf\x0c\xcf\x21\x8e\x7a\x72\xa8\x2b\xd7\x51\x57\x9e\x62\x75\xe7\x24\xd5\x91\xca\xc3\x64\xe7\x4b\xd0\x53\xc8\xbf\x5f\x22\xfc\x51\xe2\x8b\xf5\x23\xcd\xcf\xe2\x2e\x8e\xb7\x4b\x7e\xa2\x27\x80\x7c\x54\x8b\xbc\x57\xc7\xf2\x7c\x97\x65\x7f\xab\xf9\x3e\xcb\x3e\x37\xcf\x57\xc4\xa1\xde\xec\xaf\xa6\x03\xcc\x98\x97\x23\x0a\xf6\x1d\x68\x9d\x2c\x07\x8a\x75\xda\x3d\xbb\xe8\x20\xea\xf7\xef\xb0\xf8\x59\x4e\xee\xe0\x2e\x5a\xc0\x93\x9b\xa8\x3d\xf1\x3c\xad\x8b\xb1\xbf\x13\xd3\xbb\x61\x3f\xf9\x7b\x4d\x21\xfb\x46\x42\x0d\xc0\xeb\x18\xde\x08\xbc\x16\xfb\xfa\x7e\xdb\xb9\xcd\xf3\x4d\xd8\x31\xdf\xc0\x7f\x93\xdc\xc0\x06\xe4\xca\xd5\x19\xc5\xef\x18\x46\xfe\xa1\xba\x42\xdd\x61\xad\x3f\x8c\xfa\x41\xe7\xe5\x3e\x08\x20\x5e\xaa\x1f\xb5\xd9\xe5\x54\xef\xd8\xeb\x83\xa8\xa4\xc6\xb9\xdf\xaf\x44\xe4\xb9\x3f\x31\x4d\x71\x72\x11\xe3\x8f\x4c\xa3\x5e\x9d\xbe\x81\x7c\x88\xfd\x8d\xf7\x6d\xa7\xfd\x76\xa3\x54\x5e\x60\x72\x7e\x9c\xe7\xe5\xde\x1b\x27\xa6\x69\xbf\x25\xa6\x51\xff\x21\x5f\x94\xb2\xc3\x39\xaf\x19\xf9\xe2\xba\x6b\xbe\x58\x73\xc8\x17\x13\xd3\x33\x98\x87\x3e\x5b\xfc\xcc\x94\xfc\x8e\x46\x0b\xac\xa2\x3d\xa8\x6c\x95\xf3\x5c\xdc\x97\x18\x37\xf4\x69\xc7\xfd\x32\x8d\x8b\x7e\x85\x3a\x56\xe9\x2e\x3b\x4f\x7a\xfd\xa9\xaf\xb7\xc7\xf4\x7d\xaa\x58\xf7\x93\x5d\xfd\xca\x5f\x34\x03\xf7\x99\xbf\x33\xe5\x29\x5e\xf8\xbe\x2e\xe6\x9b\xb3\x58\xb7\x73\x96\x7c\x94\x28\x53\x27\xc6\x67\x69\x9d\x13\x8d\xef\x60\xdf\x2e\x83\x52\x1d\x55\xcc\x0f\x73\x88\x87\xba\xb2\x7e\x2e\x94\xf8\x6e\x52\xb3\xc3\xde\xff\x92\xf9\x3d\xeb\x4c\x71\xfe\xad\xef\x71\xe4\xc7\x70\xfe\x06\xcb\x3b\x97\x6d\x79\x75\xde\x21\xaf\xc6\xf3\x0b\x38\x0f\xc8\xbf\x78\xfe\x92\xe3\x7c\x06\x95\x77\xa0\x87\xf4\x15\xf3\xff\x2f\x80\x5f\x66\xf8\xcf\x49\xff\x1c\xf4\x57\x51\x3c\x19\xdf\x1f\xea\x3c\xd6\xb8\x52\xcf\xd3\x7a\xf9\xc4\xab\x9f\x71\xdc\xfc\x48\xdb\xfc\x99\xc6\xcd\x27\x7b\xef\x28\xc6\xd3\x35\xc4\x91\x51\xe7\xbd\xe7\x12\x4f\x7d\x65\xfd\x5f\x2e\x55\x77\x39\xe4\x39\x5e\x77\x5d\xb9\x4d\x79\x5e\x6f\x2e\x94\x90\x37\xe2\xd9\x5f\x6d\xaf\x33\x97\xcc\xf5\x94\x6b\x5c\xaf\xb8\xc4\xf5\xd5\x0d\xc5\xb5\x8a\x38\x55\x67\x17\xf0\x1e\x81\xf3\x13\xfe\xf0\xef\x67\x75\xf2\x9c\x34\xd5\x0f\x8f\x57\x23\x2e\x69\x9d\xd5\x39\x5a\xe7\xfe\x2a\xaa\x77\x16\xdb\x31\x0e\xde\x63\x4e\x82\x52\x16\x30\xd5\x13\xbe\x3d\x05\xff\x7c\xa6\xf7\x78\xf5\x02\xe2\xec\xd4\x40\x21\xbe\x3c\x32\x1e\xa8\xfe\x4b\x3c\x7f\x98\xd5\x4f\xd6\xf7\xd0\xf8\x2c\xf2\x52\x63\x0e\xfc\xbb\xe0\x27\x51\xff\xad\xa0\xfe\x9b\x02\x7f\x15\xfc\xcb\x2c\x1e\xbf\x81\x38\x3c\x0d\xfa\x4d\xdb\xfc\x0e\x39\xe6\x8d\x1c\xf2\xc6\xa3\xc8\x1b\x93\x2e\x79\xe3\x21\xac\xe3\x14\xcb\x0f\x51\xe0\x2f\x33\xbc\xd3\x96\x37\xfa\x4a\xe4\x8d\x45\xdc\xbb\x5c\xf4\xd1\x3d\x98\x6e\xdf\x0e\x39\xd7\x4d\xb2\x7f\x2f\xea\xd5\xa0\x42\x75\x57\xef\xe3\xe0\xbd\x8d\xd0\xbf\xc2\xf4\xdf\x07\xfc\x2a\xc3\x77\x7f\xa2\x7c\xa6\xdb\x35\x20\xed\xf9\x1b\xc9\x57\xee\xe7\x2a\xf7\x73\x95\xfb\xb9\xca\xfd\x5c\xe5\x7e\xae\x72\x3f\x57\xb9\x9f\xab\xdc\xcf\x55\xee\xe7\x4a\xc6\x65\xe5\x7e\xae\x72\x3f\x27\x2a\xf7\x73\x95\xfb\xb9\xca\xfd\x5c\xe5\x7e\xae\x72\x3f\x57\xb9\x9f\xfb\x1f\xbb\x9f\xab\x32\xfd\x89\x2a\x51\x79\xf0\x54\xe6\xc5\xf9\x51\x70\x3f\x2b\x4f\xd1\xca\xbc\x14\x9e\xca\xbc\x38\x3f\x0a\xf2\xb7\xac\x8a\x2b\xf3\x52\x78\xf4\x79\x69\xa8\xcc\x8b\xed\x31\xf6\xd1\x69\xfc\xae\x3c\xf4\x3c\xd5\xf7\xb4\xf8\x58\xd3\xb4\x5a\xf0\xca\xa9\x7d\x22\x30\xb9\x45\xd9\x69\xde\x5f\x42\x88\x1c\xa8\x8e\xdd\x8f\xdf\x2b\x81\x22\xd6\xe5\xd0\x0f\xaf\x6a\x62\xc8\xd4\x6f\x08\x58\xaa\xba\x88\x4d\x3a\xc8\xce\x38\xe8\x98\x73\xe8\xb7\xc0\x74\xb8\x3d\xdb\xe4\x5e\xf0\x89\x86\x4d\x56\xfc\xb7\x5e\xc2\x03\x7e\x2b\xfe\x2a\xf0\x25\x86\xf7\x02\xef\xf2\x5a\xf1\x5b\x1e\xc2\x87\x58\xff\xdf\x00\xaf\x67\xf6\xbd\x02\xbc\x9b\xd9\xe3\x85\x9d\x39\xd6\xff\xef\xd0\x7b\x9a\xe1\x7f\x06\x7e\x96\xd9\xf3\x43\x8c\xbf\xc0\xfa\x27\x81\x2f\x33\xfc\x45\x29\x5f\x2d\xba\x99\xfd\x1f\x7a\x08\x9f\x62\xf8\x2f\x81\xd7\xb1\x71\x5e\x00\xde\xcd\xf0\x2f\x56\x11\x3e\xc0\xf0\xef\xa2\xff\x3c\xb3\xff\x84\xe4\xb7\x88\xb3\x2c\x87\x5d\xf6\x10\x5e\xcf\xec\xf9\x7c\x15\xe1\x7c\xfe\xbf\x86\x71\xb8\xbf\x8f\x00\xbf\xc2\xf0\xab\x18\x7f\x95\xe1\xcf\xa2\xff\x3a\x4b\x1e\x6f\xa0\x7f\x1f\xbb\x47\x7d\x06\xf8\x21\x86\x6f\x91\x76\xd6\xd8\xe2\xf0\x57\x5e\xc2\x79\x1c\x8e\x02\xe7\x71\xf8\x14\x70\x1e\x87\x1f\x78\x08\xe7\xf3\xf0\x53\xe0\x3c\x0e\xc7\x81\xf3\x38\xfc\x27\xc6\xe7\x71\xf8\x57\xe0\x3c\x0e\xff\x00\x9c\xc7\xe1\x2c\xc6\xe7\x71\x78\x10\x38\x5f\x97\x41\x29\xbf\xcd\x16\x87\x7f\xf2\x10\xce\xe3\xf0\x27\xc0\x79\x1c\x1e\x03\xce\xe3\x70\x67\x15\xe1\x3c\x0e\xbf\x85\xfe\x3c\x0e\x85\xfc\x5e\xe9\x00\x4a\xdc\xe7\x82\xfb\x5d\xf0\x6a\x17\x7c\x8b\x0b\xbe\xd5\x05\xaf\x71\xc1\xef\x74\xc1\xb7\xd9\xb0\x3d\xf2\x3d\xf8\xff\x6c\xf8\xbd\x12\xbf\xc7\x86\x5f\x90\xdf\x85\xee\xb6\xe1\x3b\x25\x5e\x67\xc3\x57\x65\x7e\xb6\xdb\x7f\x48\xe2\x76\x3b\x2f\xcb\xf7\x5a\xfb\x3c\x1f\x90\xb8\x7d\x3e\xfd\x72\x1c\xfb\xbc\x2d\x49\xdc\x3e\x3f\x5d\x12\xb7\xcf\xc3\xbc\x1c\xdf\xbe\x8e\x5d\x12\xb7\xaf\xd7\x19\xe9\x6f\xd0\x6e\x8f\xc4\xb7\xdb\xf0\xa0\x9c\xcf\x9d\x36\xfc\x67\xb2\xff\x0e\x1b\xde\x2c\xf1\x90\x0d\xef\x06\xd5\xd3\xcf\x03\x42\x88\x08\xe3\x53\x8c\x7f\xdb\xc4\xef\xd5\x7d\xdf\x54\xe4\x9f\xd2\xfd\x0e\x58\xdb\xcd\xe3\x47\xd9\xf8\x51\x36\xbe\xce\x9f\x63\xe3\xcf\x78\xad\xbc\x08\x58\xf5\x45\x4c\xbc\xae\x6b\x80\xc9\x2f\x2b\x56\xbe\xde\x63\xe5\x73\x55\x45\xfe\x09\xdd\xbf\x80\x95\xef\xae\x2e\xf2\x4f\xfe\x17\xce\x97\xb1\x53\x37\x0b\x21\x9a\x84\xc0\xad\x20\xf1\x7b\x30\x07\x06\x1f\x36\xcd\xaf\xce\x37\x0b\x21\x8e\x9a\xf8\x16\x21\xc4\x94\x89\x6f\xd5\xcf\x31\x13\xdf\xa6\xfb\x6b\xe2\xdb\x85\x10\x97\x4c\xbc\xfc\x44\xde\x94\x4d\xe6\xb2\x62\x24\x9d\xcc\xa6\xd2\xc7\x9f\x4b\xc6\x62\xc3\xa3\xc9\x6c\x2c\x91\x19\x89\xc5\x13\x89\x64\x2a\x2b\x9a\xd2\xc9\xa3\x85\xe6\x3d\xbc\xd5\x2c\x98\xea\x88\x1d\x8e\x67\xe3\x47\xd2\xf1\x63\xb1\xc4\xf1\xd1\xd1\x64\x22\x2b\x46\x4a\x35\xb2\xa1\x5d\xbb\x94\x68\xb7\xe8\x6f\x2b\xa5\xdf\xa1\x91\xeb\x77\xeb\x52\xa2\xdd\xa4\x3f\x9b\x48\xc5\x4e\x74\xd8\x34\x33\xd8\xaa\xd3\xa9\xd1\xb1\x85\xeb\x69\x73\xd6\xd3\x56\x4a\x4f\x9b\xab\x9e\x62\xcb\xb1\x78\x2a\xa3\x63\xd9\x74\x3c\x91\x4c\xc7\x32\xd9\x78\x76\x3c\x23\x62\x27\x92\xe9\xcc\xf0\xf1\x51\x11\x3b\x3a\x9c\x48\x8e\x66\x92\x72\x84\xa6\xe4\x50\x6c\x30\x1d\x3f\x96\x14\x4d\x99\x6c\x3a\x1b\x7f\x4e\x34\x65\xd4\x63\x3a\x7d\xfa\xb1\xc7\xda\x62\x0f\xe8\xa4\x23\xd6\x22\x69\x33\x68\x24\xd6\x0c\x9c\x68\x2b\x68\x33\x68\x24\x16\x21\xe9\x08\xb5\x46\x30\x48\x04\x83\x44\x30\x08\xf0\x66\xf4\x6e\x46\xf7\x66\xf4\x33\xf0\x96\x4e\xf4\xef\x44\xff\x4e\xf4\xeb\x44\xbf\xce\x82\xc7\xb1\xe4\x89\xe4\x68\x36\x36\x9c\x3a\xd1\x41\x18\xa6\x24\x73\x3c\x31\x62\x42\xb3\xe3\xa9\xa3\xc9\xd4\xf0\x61\x82\x48\x49\x07\x06\xef\xc0\xa0\xc0\xdb\xd1\xdc\x0e\x1b\xda\xd1\x0d\x38\xd1\x56\xd0\x66\x9d\xda\x6d\x69\x73\xb4\xa5\xcd\x6e\x4b\x1b\x06\x6f\xc3\x60\xe0\x5b\x5a\x31\x71\xad\xe0\x5b\xc0\xb7\x80\x6f\x06\xdf\x0c\x79\xf0\x44\x23\xb1\x96\x30\x9c\x08\x93\xb1\x2d\x46\xc2\xfa\x94\xcf\x5e\x8f\x70\xac\xc6\xd6\x1e\x21\xda\xca\xde\x17\xf8\xbb\xbe\x82\x3f\x56\xee\x16\xde\x5f\xf9\xc3\x3f\xa1\xdc\x52\x4a\xcb\xe7\x18\xce\x5f\x4b\x6f\x2a\xc2\xb1\x0a\x3c\xf4\x10\x51\xe3\x3d\xbc\x1e\xf7\xe4\x86\xbc\x81\xff\xd1\x45\xbf\xf1\x1e\xbc\x12\x28\xad\xff\xf7\x2e\xfa\x53\xd0\xdf\x67\xd2\xef\x73\xd0\xff\xba\x8b\xfe\x19\x0c\x5a\xce\xff\xd7\x5c\xf4\x2f\x39\xf8\xef\x77\xd0\x3f\xee\xa2\x3f\xb0\x99\x28\xff\x0e\xc0\xf5\x8f\xb9\xe8\xbf\x02\xfd\x87\x4c\xfa\xab\x1d\xf4\xdf\xeb\x12\x3f\xa9\xbb\x40\xab\x4b\xeb\xff\x9c\x70\xd6\x1f\x7e\xd8\xae\x7f\x8b\x83\xfe\xdd\x2e\xfe\xaf\xa2\xc4\x2c\x37\xff\xf5\x2e\xfe\xcf\x3c\x6c\xd5\xa3\xeb\xdf\xea\xa0\x5f\x71\xd1\x3f\x80\x02\xa5\x5c\xfc\xfd\xcb\xc5\xff\x73\xd0\x6f\x8e\xbf\x1a\x07\xfd\x73\x2e\xf3\x1f\xfe\x02\xd1\x72\xfe\x9f\x73\xd1\xbf\xe6\xe0\xff\x9d\x0e\xfa\x5f\x72\xd1\x3f\x0f\xfd\xe5\xe2\xef\x05\x17\xfd\x02\xf9\xcb\xbc\xfe\xdb\x1c\xf4\xbf\xe6\x25\xfd\x3c\x07\xd6\x36\x11\xe5\xf7\x74\x3c\x7f\x79\x5c\xe4\x1b\xf6\x6c\x4c\x7e\xd6\x45\xbe\x2b\xbc\x31\xf9\xed\x2e\xf2\x03\xcd\x1b\x93\x5f\x70\x91\x4f\xb5\x6c\x4c\xfe\x7e\x17\xf9\xd3\xad\x1b\x93\xaf\xf5\x38\xcb\x9f\x6b\xdb\x98\x7c\xd8\x45\x7e\xa1\xdd\xb9\x3f\x3f\xbf\xee\x73\x91\xbf\xe4\x22\xcf\xf9\x07\x21\xcf\x3e\x4b\x89\x25\xc8\x2f\x33\x9c\xc7\x6f\xc4\xe3\x72\x7e\x21\x7e\x8d\xef\xb6\x7a\xfc\xfe\xbf\x43\xfc\x7e\xc5\x63\xd7\xad\x3f\xa7\xf1\xff\x6e\x56\x4c\xef\x5d\x9d\x26\x79\xe3\x0b\xc3\xbf\x03\x00\x00\xff\xff\x57\x91\xec\xa4\x68\x4c\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 19560, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

